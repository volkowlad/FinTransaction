// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	FinTransaction "FinTransaction"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(user FinTransaction.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// GenerateToken mocks base method.
func (m *MockAuthorization) GenerateToken(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthorizationMockRecorder) GenerateToken(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), username, password)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), token)
}

// MockWallet is a mock of Wallet interface.
type MockWallet struct {
	ctrl     *gomock.Controller
	recorder *MockWalletMockRecorder
}

// MockWalletMockRecorder is the mock recorder for MockWallet.
type MockWalletMockRecorder struct {
	mock *MockWallet
}

// NewMockWallet creates a new mock instance.
func NewMockWallet(ctrl *gomock.Controller) *MockWallet {
	mock := &MockWallet{ctrl: ctrl}
	mock.recorder = &MockWalletMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWallet) EXPECT() *MockWalletMockRecorder {
	return m.recorder
}

// CreateWallet mocks base method.
func (m *MockWallet) CreateWallet(userID int, wallet FinTransaction.Wallet) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", userID, wallet)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockWalletMockRecorder) CreateWallet(userID, wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockWallet)(nil).CreateWallet), userID, wallet)
}

// DeleteIDWallet mocks base method.
func (m *MockWallet) DeleteIDWallet(userID, walletID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIDWallet", userID, walletID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIDWallet indicates an expected call of DeleteIDWallet.
func (mr *MockWalletMockRecorder) DeleteIDWallet(userID, walletID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIDWallet", reflect.TypeOf((*MockWallet)(nil).DeleteIDWallet), userID, walletID)
}

// GetAllWallets mocks base method.
func (m *MockWallet) GetAllWallets(userID int) ([]FinTransaction.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWallets", userID)
	ret0, _ := ret[0].([]FinTransaction.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWallets indicates an expected call of GetAllWallets.
func (mr *MockWalletMockRecorder) GetAllWallets(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWallets", reflect.TypeOf((*MockWallet)(nil).GetAllWallets), userID)
}

// GetIDWallet mocks base method.
func (m *MockWallet) GetIDWallet(userID, walletID int) (FinTransaction.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDWallet", userID, walletID)
	ret0, _ := ret[0].(FinTransaction.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDWallet indicates an expected call of GetIDWallet.
func (mr *MockWalletMockRecorder) GetIDWallet(userID, walletID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDWallet", reflect.TypeOf((*MockWallet)(nil).GetIDWallet), userID, walletID)
}

// Transfer mocks base method.
func (m *MockWallet) Transfer(userID, id int, input FinTransaction.TransferWallet) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", userID, id, input)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer.
func (mr *MockWalletMockRecorder) Transfer(userID, id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockWallet)(nil).Transfer), userID, id, input)
}
